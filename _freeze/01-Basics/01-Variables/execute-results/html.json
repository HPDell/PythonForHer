{
  "hash": "fb4e5dc60d8df04e6b67b0bc0bd09f92",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"变量和函数\"\ndescription: 介绍变量的概念、创建、运算，以及函数运算\n---\n\n# 什么是变量\n\n## 已知数和未知数\n\n数学中，我们一般讲“已知数”和“未知数”。\n比如 $x$ 一般表示未知数，$c$ 一般表示已知数。\n这两个符号和数字一样是可以参与运算的。\n\n$$\ny = ax + 1\n$$\n\n这个时候 $a$ 可以是常量，表示斜率。\n\n## 变量和常量\n\n- 在计算机中，不论是已知数也好、未知数也好，都得是能在硬盘上、内存中表示的数，也就是必须都是确定的。这是计算机的原理决定的。\n- 只不过有些量可以是变化的，有些是固定的。\n- 可以变的就是变量，不能变的就是常量。\n\n::: {.callout-important}\n在 Python 中，没有真正的常量。\n:::\n\n## 如何表示变量 {.smaller}\n\n在 Python 中变量都要有一个名字，这个名字是一组连在一起的字母、数字或者下划线，但是不能以数字开头，\n也不能是 Python 中已有的一些关键词。\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n合法的\n\n- `model1`\n- `_table`\n- `property_price2018`\n- `Property`\n:::\n\n::: {.column width=\"50%\"}\n不合法的\n\n- `1_model`\n- `.table`\n- `property-price2018`\n- `Property(a)`\n:::\n\n::::\n\n关键词\n\n`and as assert break class continue def del elif else except `\n\n`False finally for from global if import in is lambda None `\n\n`nonlocal not or pass raise return True try while with yield `\n\n## 变量类型 {.smaller}\n\n|          | 类型名 | 符号 | 例子 |\n| -------- | ------ | ---  | ---- |\n| 单个变量 | 整数 | `int` | 1, 2, 3 |\n|          | 浮点数 | `float` | 1.2, $1\\times 10^{-2}$, 1e-2 |\n|          | 逻辑 | `bool` | `True`, `False` |\n| 一组变量 | 字符串 | `str` | \"abc\", \"hello\", \"world\" |\n|          | 列表   | `list` | `[1,2,3]`, `[1,1.1,\"1.23\"]` |\n|          | 集合   | `set`  | `{1,2,3}` |\n|          | 元组   | `tuple` | `(1,2,3)` |\n| 某种结构 | 字典 | `dict` | `{'a': 1, 'b': 2}` |\n|          | 自定义的 | | 日期、复数等，被称为“类” |\n\n: {tbl-colwidths=\"[20, 20, 20, 40]\"}\n\n::: {.fragment}\n- 字符串本身是其实是一个字符的列表，但是往往将其当做一个特殊的单变量使用\n- 集合中不能有重复元素，元组的长度是确定的\n:::\n\n## 创建变量\n\n只要写一个变量名，然后用 `=` 给其赋值，就可以创建一个变量\n\n::: {#2f699e8b .cell execution_count=1}\n``` {.python .cell-code}\n# 整数\nyear = 2024\n# 浮点数\nprice = 15243.42\n# 字符串\ncity = 'zhengzhou'\n# 列表\ndistricts = ['jinshui', 'erqi', 'huiji', 'gaoxin', 'zhengdong']\n# 字典\ndistrict_name = {\n  'jinshui': '金水',\n  'erqi': '二七',\n  'huiji': '惠济',\n  'gaoxin': '高新',\n  'zhengdong': '郑东'\n}\n```\n:::\n\n\n## 删除变量\n\n- 通常情况下，创建的变量无需手动删除。\n- 如果要删除变量，使用 `del <变量名>` 的方式\n\n::: {#f6b027e9 .cell execution_count=2}\n``` {.python .cell-code}\ndel year\n```\n:::\n\n\n- 也可以删除列表中的某一个元素\n\n::: {#f7a2a7df .cell execution_count=3}\n``` {.python .cell-code}\ndel districts[0]\ndistricts\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n['erqi', 'huiji', 'gaoxin', 'zhengdong']\n```\n:::\n:::\n\n\n::: {.callout-note}\n此处 `districts[0]` 中的 `[0]` 是列表索引，从 0 开始。\n也就是 0 代表第一个元素，1 代表第 2 个元素……\n:::\n\n# 变量运算\n\n所有运算都需要使用运算符。\n不同类型的变量可以进行的运算是不一样的。\n\n## 运算符\n\n- 所有运算符都表示一种运算，也就是一种数学意义上的函数。\n- 既然是函数，就要有“自变量”，被称为运算符的**操作数**。\n- 通常操作数的个数为 1 和 2，Python 很少有 3 个操作数的运算符。\n- 同一个运算符，操作数不同，执行的运算也不同\n\n---\n\n- 二元运算符\n\n```python\n+  -  *  /  **  //  > < >= <= == != =\nand or in\n```\n\n- 一元运算符\n\n```python\nnot * **\n```\n\n- 三元运算符\n\n```python\na if b else c\n```\n\n- 括号运算符\n\n```python\n() [] {}\n```\n\n## 整数、浮点数、逻辑值\n\n:::: {.columns}\n::: {.column width=\"30%\"}\n\n::: {#139f31d5 .cell execution_count=4}\n``` {.python .cell-code}\na = 5\nb = 3\na ** b\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n125\n```\n:::\n:::\n\n\n::: {#462e24e2 .cell execution_count=5}\n``` {.python .cell-code}\na // b\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n1\n```\n:::\n:::\n\n\n::: {#4d83f5d5 .cell execution_count=6}\n``` {.python .cell-code}\na > 3\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#7db7e987 .cell execution_count=7}\n``` {.python .cell-code}\nb > 3\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#1f998696 .cell execution_count=8}\n``` {.python .cell-code}\na >= 3\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#c4b0844e .cell execution_count=9}\n``` {.python .cell-code}\na == 5\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#57627028 .cell execution_count=10}\n``` {.python .cell-code}\na != 5\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nFalse\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"35%\"}\n\n::: {#5a343adf .cell execution_count=11}\n``` {.python .cell-code}\na += 2\na\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n7\n```\n:::\n:::\n\n\n::: {#509c2fa2 .cell execution_count=12}\n``` {.python .cell-code}\nTrue and True\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#50ed4578 .cell execution_count=13}\n``` {.python .cell-code}\nTrue and False\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#e16bdd65 .cell execution_count=14}\n``` {.python .cell-code}\nFalse and False\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#0a01c665 .cell execution_count=15}\n``` {.python .cell-code}\nTrue or True\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#7fceb134 .cell execution_count=16}\n``` {.python .cell-code}\nTrue or False\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#69e398fc .cell execution_count=17}\n``` {.python .cell-code}\nFalse or False\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nFalse\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"35%\"}\n\n::: {#96d9809c .cell execution_count=18}\n``` {.python .cell-code}\na % b\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n1\n```\n:::\n:::\n\n\n::: {#d99ec752 .cell execution_count=19}\n``` {.python .cell-code}\nnot True\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#8bb35f59 .cell execution_count=20}\n``` {.python .cell-code}\nnot False\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#6bdb5e82 .cell execution_count=21}\n``` {.python .cell-code}\n1.0 and True\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#2a6f77c6 .cell execution_count=22}\n``` {.python .cell-code}\n0 and True\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n0\n```\n:::\n:::\n\n\n`0` 被认为是 `False`\n\n其他被认为是 `True`\n\n:::\n::::\n\n## 列表\n\n:::: {.columns}\n::: {.column}\n\n::: {#64ee31d7 .cell execution_count=23}\n``` {.python .cell-code}\na = [1, 2, 3]\nb = [10, 11, 12]\na + b\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n[1, 2, 3, 10, 11, 12]\n```\n:::\n:::\n\n\n::: {#34935b88 .cell execution_count=24}\n``` {.python .cell-code}\na and b\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n[10, 11, 12]\n```\n:::\n:::\n\n\n::: {#69876641 .cell execution_count=25}\n``` {.python .cell-code}\na > b\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#f8fc8350 .cell execution_count=26}\n``` {.python .cell-code}\na < b\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\nTrue\n```\n:::\n:::\n\n\n列表第一个元素被用于执行逻辑运算\n\n::: {#b1d5ad87 .cell execution_count=27}\n``` {.python .cell-code}\n[*a, *b]\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n[1, 2, 3, 10, 11, 12]\n```\n:::\n:::\n\n\n:::\n::: {.column}\n\n::: {#b03b19e7 .cell execution_count=28}\n``` {.python .cell-code}\na * 2\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n[1, 2, 3, 1, 2, 3]\n```\n:::\n:::\n\n\n::: {#7754d0e8 .cell execution_count=29}\n``` {.python .cell-code}\n1 in a\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#d910dab3 .cell execution_count=30}\n``` {.python .cell-code}\n10 in a\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#478d0150 .cell execution_count=31}\n``` {.python .cell-code}\na[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n1\n```\n:::\n:::\n\n\n::: {#ef8ecc85 .cell execution_count=32}\n``` {.python .cell-code}\na[1] = 9\na\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n[1, 9, 3]\n```\n:::\n:::\n\n\n::: {#138e1ea9 .cell execution_count=33}\n``` {.python .cell-code}\na[0:2]\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n[1, 9]\n```\n:::\n:::\n\n\n:::\n::::\n\n## 字典\n\n:::: {.columns}\n::: {.column width=\"55%\"}\n\n::: {#5725250c .cell execution_count=34}\n``` {.python .cell-code}\ndistrict_name['jinshui']\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n'金水'\n```\n:::\n:::\n\n\n::: {#81e710d6 .cell execution_count=35}\n``` {.python .cell-code}\ndistrict_name['gongyi'] = '巩义'\ndistrict_name\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\n{'jinshui': '金水',\n 'erqi': '二七',\n 'huiji': '惠济',\n 'gaoxin': '高新',\n 'zhengdong': '郑东',\n 'gongyi': '巩义'}\n```\n:::\n:::\n\n\n::: {#fe22a96d .cell execution_count=36}\n``` {.python .cell-code}\ndistrict_name['zengdong'] = '郑东新区'\ndistrict_name\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n{'jinshui': '金水',\n 'erqi': '二七',\n 'huiji': '惠济',\n 'gaoxin': '高新',\n 'zhengdong': '郑东',\n 'gongyi': '巩义',\n 'zengdong': '郑东新区'}\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"45%\"}\n\n::: {#08ddcdec .cell execution_count=37}\n``` {.python .cell-code}\n{\n  **district_name,\n  'guancheng': '管城'\n}\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n{'jinshui': '金水',\n 'erqi': '二七',\n 'huiji': '惠济',\n 'gaoxin': '高新',\n 'zhengdong': '郑东',\n 'gongyi': '巩义',\n 'zengdong': '郑东新区',\n 'guancheng': '管城'}\n```\n:::\n:::\n\n\n::: {#eb747d65 .cell execution_count=38}\n``` {.python .cell-code}\n'jinshui' in district_name\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\nTrue\n```\n:::\n:::\n\n\n:::\n::::\n\n## 字符串\n\n:::: {.columns}\n::: {.column}\n字符串支持列表的操作\n\n::: {#a40ffa24 .cell execution_count=39}\n``` {.python .cell-code}\ncity\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n'zhengzhou'\n```\n:::\n:::\n\n\n::: {#412c2af5 .cell execution_count=40}\n``` {.python .cell-code}\ncity[0:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\n'zheng'\n```\n:::\n:::\n\n\n::: {#6ee45ac5 .cell execution_count=41}\n``` {.python .cell-code}\ncity * 3\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n'zhengzhouzhengzhouzhengzhou'\n```\n:::\n:::\n\n\n::: {#108b8d17 .cell execution_count=42}\n``` {.python .cell-code}\ncity + '2024'\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\n'zhengzhou2024'\n```\n:::\n:::\n\n\n每个字符本身都对应了一个非负整数\n\n::: {#bcc0ea50 .cell execution_count=43}\n``` {.python .cell-code}\n'abc' > 'ABC'\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\nTrue\n```\n:::\n:::\n\n\n:::\n::: {.column}\n\n变量可以通过某种格式转换为字符串\n\n::: {#959607d6 .cell execution_count=44}\n``` {.python .cell-code}\nyear = 2024\nf\"Properties in {city} in {year}\"\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\n'Properties in zhengzhou in 2024'\n```\n:::\n:::\n\n\n:::\n::::\n\n# 函数\n\n如果运算符不能满足计算需求，则可以编写函数。\n\n## 定义函数\n\n函数包含三个部分：\n\n- 函数名：与变量命名要求相同\n- 参数列表：一系列变量名，用逗号分隔\n- 函数体：函数的计算过程。如果函数有计算结果，用 `return` 将结果返回。\n\n```python\ndef 函数名(参数列表):\n    函数体\n```\n\n```python\ndef a_function(arg1, arg2):\n    # 对 arg1 和 arg2 执行一些操作或者计算\n    value = arg1 + arg2\n    return value\n```\n\n## 函数调用\n\n使用 `()` 运算符调用函数，将实际用于执行函数的参数一一对应放在 `()` 中，即按位置传递。\n\n```python\na_function(value1, value2)\n```\n\n也可以写出参数名赋值\n\n```python\na_function(arg1=value1, arg2=value2)\n```\n\n::: {.callout-note}\n- 声明函数时所写的参数列表中的参数相当于未知数，被称为“形参”。本身并不具有任何值，类似于一个占位符。\n  只有当函数被调用的时候才能确定其值。\n- 调用函数时所写的参数列表中的参数是已知的，被称为“实参”。本身的值必须可以被确定。\n- 一个函数的形参可以传入另一个函数的形参。\n:::\n\n## 例子\n\n::: {.callout-note}\n现在用包含两个元素的元组 `(a, b)` 表示坐标，计算两组坐标之间的距离的平方倒数（反距离加权）。\n\n::: {#a323256c .cell execution_count=45}\n``` {.python .cell-code}\npoint1 = (0, 0)\npoint2 = (1, 1)\n1 / ((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\n0.5\n```\n:::\n:::\n\n\n:::\n\n写成函数就可以重复利用上面的过程\n\n::: {#e19d72ea .cell execution_count=46}\n``` {.python .cell-code}\ndef idw(p1, p2, power):\n    return 1 / ((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) ** (power / 2)\n\nidw(point1, point2, 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\n0.5\n```\n:::\n:::\n\n\n---\n\n也可以分步写地更清晰\n\n::: {#3bc11a37 .cell execution_count=47}\n``` {.python .cell-code}\ndef idw2(p1, p2, power):\n    squared_distance = (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2\n    powered_distance = squared_distance ** (power / 2)\n    return 1 / powered_distance\n\nidw2(point1, point2, 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\n0.5\n```\n:::\n:::\n\n\n::: {.fragment}\n参数还可以给一个默认值，这样如果取默认值，就无需再设置参数  \n\n::: {#20e64167 .cell execution_count=48}\n``` {.python .cell-code}\ndef idw3(p1, p2, power=2):\n    squared_distance = (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2\n    powered_distance = squared_distance ** (power / 2)\n    return 1 / powered_distance\n\nidw3(point1, point2)\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\n0.5\n```\n:::\n:::\n\n\n::: \n\n---\n\n## 一些内置的函数\n\n数学运算\n\n```\nabs(x) divmod(x, y) max(a, b, c) min(a, b, c) pow(x, a) round(a)\nsum([a, b]) all([a, b]) any([a, b])\n```\n\n创建某种类型的变量或转换为某种类型\n\n```\nint(a) float(a) list({a, b}) set([a, b]) dict() str()\n```\n\n列表操作\n\n```\n长度 len([a, b])   排序 sorted([a, b])   反转 reversed([a, b])\n生成序列 range(start, stop, step)        组合列表 zip([a, b], [c, d])\n枚举列表 enumerate([a, b])               筛选 filter([a, b])\n```\n\n其他\n\n```\n打印值 print()    字符串表示法 repr()\n```\n\n---\n\n## 函数调用函数\n\n一个函数可以调用另一个函数，将自己的形参传递到另一个函数中。\n\n::: {#3366a78a .cell execution_count=49}\n``` {.python .cell-code}\ndef relative_absolute_error(error, observe):\n    '''\n    相对误差绝对值\n    '''\n    return abs(error) / abs(observe)\n```\n:::\n\n\n也可以自己调用自己，称为递归函数。\n\n::: {#1b38f346 .cell execution_count=50}\n``` {.python .cell-code}\ndef factorial_recursive(x):\n    return x * factorial_recursive(x - 1) if x > 0 else 1\n```\n:::\n\n\n::: {.callout-caution}\n慎用递归函数，必须设置递归结束条件，否则会无限递归。\n:::\n\n---\n\n## 几个特殊的参数\n\n- `*args`：捕获一系列按位置传递的参数，并放在名为 `args` 的元组中。\n- `**kwargs`：捕获一系列按名称传递的参数，并放在名为 `kwargs` 的字典中。\n- `/`：该参数之前的所有参数必须按位置传递。\n- `*`：该参数之后的所有参数必须按名称传递。\n\n::: {#f33438bb .cell execution_count=51}\n``` {.python .cell-code}\ndef average(*args):\n    print(args)\n    return sum(args) / len(args)\n\naverage(1,2,3,4,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1, 2, 3, 4, 5)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\n3.0\n```\n:::\n:::\n\n\n# 案例\n\n## 网络爬虫计算爬取页数 {.smaller}\n\n在编写网络爬虫时，通常是获取一个列表作为摘要信息，然后再针对列表的每一项爬取其详细信息。\n这样的列表可能有很多，但是很多时候不能知道到底有多少。\n但是项目的总数是固定的。\n比如爬取一个城市的二手房房价，通常网站会告诉我们一共有多少二手房 `total`，每页显示多少二手房 `page_size`。\n在爬取每一页时，我们需要计算出这一页第一个项目是总项目中的第几个 `offset`，告诉服务器，然后服务器才会根据 `page_size` 返回一个新的列表。\n因此我们需要写一些辅助函数。\n\n1. 根据二手房总数和每页显示的数量确定到底有多少页。\n2. 根据当前爬取的页数 `page` （从 1 开始） 计算偏移量 `offset` （从 0 开始）\n\n测试数据：\n\n::: {#32312074 .cell execution_count=52}\n``` {.python .cell-code}\npage_size = 20\ntotal = 836\npage = 2\n```\n:::\n\n\n--- \n\n::: {.callout-tip}\n1. 用 `total` 整除 `page_size` 则为能完全显示 `page_size` 个项目的页数，再判断余数是不是大于 0。如果大于 0，则说明还有多余的项目，页数再+1。\n2. 将当前 `page` 减去 1，再乘以 `page_size`，就是当前页面第一个项目在总项目中的顺序（从 0 开始）\n:::\n\n::: {#d2597661 .cell execution_count=53}\n``` {.python .cell-code}\ndef page_num(page_size, total):\n    return total // page_size + int(total % page_size > 0)\n\ndef offset(page_size, page):\n    return page_size * (page - 1)\n\nprint(page_num(page_size, total))\nprint(offset(page_size, page))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n42\n20\n```\n:::\n:::\n\n\n## 空间位置唯一值 {.smaller}\n\n在爬取二手房房价数据时，每个挂牌销售的二手房的位置通常只精确到小区，且只保留小数点后 6 位。\n小区会有一些指标，比如绿化率、容积率、物业费等，是非常重要的。\n于是我们需要想办法将住宅本身和其所在小区关联起来。\n但是如果通过名字进行关联，有时候会出现两个小区名字比较相似的情况，\n也会出现小区名字不匹配的问题。\n因此更好的办法是根据空间坐标进行匹配。\n这就需要将坐标转化为单个唯一值，便于关联。\n\n1. 通过一个函数将一个坐标值输入转化为一个输出，使这个字符串能够最大可能保留输入值的唯一性。\n2. 通过一个函数判断两个输入坐标是否是可以匹配的。\n\n::: {#f230bded .cell execution_count=54}\n``` {.python .cell-code}\nlocation1 = (114.213412, 20.667654)\nlocation2 = (114.213422, 20.668654)\n```\n:::\n\n\n---\n\n::: {.callout-tip}\n计算机中的小数存在一定的误差，原理上就不能表示的非常精确，这被称为浮点误差。\n如果直接使用数字本身进行比较，浮点误差容易导致 `5 != 5` 的情况出现。\n所以要按照一定的方法进行转换后再比较。\n:::\n\n::: {#5135b105 .cell execution_count=55}\n``` {.python .cell-code}\ndef coords_id(loc):\n    return f\"{round(loc[0], 6)}-{round(loc[1], 6)}\"\n\ndef coords_id_compare(loc1, loc2):\n    return coords_id(loc1) == coords_id(loc2)\n\nprint(coords_id(location1))\nprint(coords_id_compare(location1, location2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n114.213412-20.667654\nFalse\n```\n:::\n:::\n\n\n# 下节\n\n程序流程控制\n\n- 条件语句（`if-else`）\n- 循环验收（`for` 和 `while`）\n\n",
    "supporting": [
      "01-Variables_files"
    ],
    "filters": [],
    "includes": {}
  }
}