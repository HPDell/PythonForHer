{
  "hash": "eb04906ab2074b018dac1d25cfc14018",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"自定义类\"\ndescription: \"自定义类型可以帮助我们更好地实现模块化编程\"\n---\n\n# 面向对象的程序设计\n\nObject-oriented Programming\n\n## 为什么需要类和对象 {.small}\n\n很多时候我们要描述的东西是比较复杂的。\n比如，要描述一个小区，我们可能需要以下信息:\n\n```python\n{\n    'name': '小区名称',\n    'location': (112.234345, 30.103932),\n    'developer': '开发商',\n    'avg_price': 12000,\n    'buildings': ['#1', '#2', '#3'],\n    'is_selling': True,\n    'properties': ['1-101', '1-102', '1-201']\n}\n```\n\n而且可能还有一些以小区为单位的操作，比如：总户数 `count_properties()` 。\n这些函数是和“小区”这个类型的变量强绑定的，不能应用于其他类型上。\n此时使用内置类型就无法满足我们的需要。\n\n## 类和对象\n\n::: {.callout-note title=\"对象\"}\nObject，一般翻译为“对象”，也被称为“实例”、“实体”。\n具有一定关联的变量和函数的集合，用于整体化地描述某个物体、概念或资源，\n从而将零散的代码整合起来。\n:::\n\n::: {.callout-note title=\"类\"}\n类描述一个对象拥有哪些变量和函数。\n必须拥有一个 `__init__()` 函数来初始化变量。\n:::\n\n::: {.columns}\n::: {.column}\n\n```python\nclass Community:\n    def __init__(self):\n        self.title = \"小区名\"\n```\n\n:::\n::: {.column}\n\n```python\ncomm = Community()\nprint(comm.title)\n```\n\n:::\n:::\n\n## 四个概念\n\n1. 抽象：将某种物体或概念的特点抽象为一组变量。\n2. 封装：将该种物体或概念的能力包装为一组函数。\n3. 继承：一个类（基类）进行扩展和更改，得到其他类（子类）。\n4. 多态：子类种来自基类的函数可以有和基类不同的行为。\n\nPython 中能用到的所有的变量，都是经过抽象和封装的类对象。\n\n\n## 案例：猫、家猫、虎\n\n::: {.columns}\n::: {.column}\n1. 猫\n   1. 花纹、皮毛、尾巴、年龄\n   2. 叫、进食\n2. 家猫\n   1. 主人、疫苗、宠物证\n   2. 喵喵叫、缠人、蹲坐\n3. 虎\n   1. 野生或饲养、活动区、标识\n   2. 咆哮、捕猎\n:::\n::: {.column}\n![](./assets/cat.jpg){width=50%}\n\n![](./assets/tiger.jpg){width=50%}\n:::\n\n:::\n\n## 优缺点\n\n1. 抽象和封装可以将代码按照实体组合起来，并赋予其实际含义，可以更好地组织和理解代码。\n2. 继承有助于少写代码，减少出错的可能；多态又保持了一定的灵活性。\n\n但是：\n\n3. 抽象和封装要合适，不适当的封装会造成困难，过度封装则会增加维护难度\n4. 基类太多有的时候会导致代码容易出错，也容易造成冲突\n\n# 编写类\n\n声明类包含哪些变量和函数的过程。\n\n## 构造函数\n\n在构造函数 `__init__()` 中定义类包含哪些变量。\n\n```python\nclass Property:\n    def __init__(self):\n        self.price = 20000\n        self.size = 100\n        self.bedroom = 2\n        self.bathroom = 1\n        self.decorated = True\n        self.community = Community()\n```\n\n::: {.callout-important}\n类的所有函数^[静态函数和类函数除外，暂时不考虑这种特殊情况。]都必须包含一个 `self` 参数，而且必须是第一个参数。\n:::\n\n---\n\n构造函数除了定义变量外，还有一个重要作用是传递变量的初始值。\n\n```python\nclass Appartment:\n    def __init__(self, price, size, bedroom, bathroom, decorated, community):\n        self.price = price\n        self.size = size\n        self.bedroom = bedroom\n        self.bathroom = bathroom\n        self.decorated = decorated\n        self.community = community\n\nappartment1 = Appartment(20000, 100, 2, 1, True, comm)\nprint(appartment1.price)\n```\n\n## 成员变量\n\n- 成员变量是只属于类对象的变量，其他地方无法获取。\n- 同一个类的不同对象的同一个变量，也是不同值的。\n- 在类对象后面使用 `.变量名` 的方式使用成员变量，也可以修改值。\n\n```python\nappartment1.price = 15000\nprint(appartment1.price)\n```\n\n## 成员函数（方法）\n\n成员函数的编写方法和普通函数一样，但是可以通过 `self` 调用成员变量，而普通函数是不可以使用 `self` 的。\n\n```python\nclass Appartment:\n    def __init__(self, price, bedroom, bathroom):\n        self.price = price\n        self.bedroom = bedroom\n        self.bathroom = bathroom\n    \n    def info(self):\n        print(f\"{self.bedroom}b{self.bathroom}b appartment, {self.price} per week.\")\n\nappartment1 = Appartment(400, 1, 1)\nappartment1.info()\n```\n\n- 在类对象后面使用 `.函数名(实参)` 的方式调用成员函数。\n- 调用成员函数的时候，不需要明写 `self` 参数。\n\n---\n\n成员函数也可以有自己的参数，使用自己的参数时无需使用 `self`。\n\n```python\nclass RentalAppartment:\n    def __init__(self, price, bedroom, bathroom):\n        self.price_per_week = price\n        self.bedroom = bedroom\n        self.bathroom = bathroom\n    \n    def total_rent(self, weeks):\n        return self.price_per_week * weeks\n\nappart1 = RentalAppartment(400, 1, 1)\nappart1.total_rent(52)\n```\n\n::: {.callout-tip}\n成员函数参数也可以有默认值。\n:::\n\n## 继承和派生\n\n通过扩展一个类（基类）得到另一个类（子类、派生类）的过程。\n\n```python\nclass 派生类(基类):\n    // 类定义\n```\n\n::: {.callout-tip}\n1. 基类可以不止有一个，但最好只有一个。\n2. 子类中包含基类的所有变量和函数。\n3. 子类中的函数可以使用 `super()` 表示基类。\n4. 如果子类和基类有同样的变量或函数，子类中优先使用自己的。\n:::\n\n---\n\n例如\n\n::: {.columns}\n::: {.column width=\"58%\"}\n\n::: {#cda90c8e .cell execution_count=1}\n``` {.python .cell-code}\nclass Animal:\n    def __init__(self, name):\n        self.name = name\n        self.appetited = 0\n        self.starve = 0\n\n    def eat(self, volume):\n        self.starve += volume / self.appetited\n        self.starve = min([self.starve, 1])\n        return self.starve\n```\n:::\n\n\n:::\n::: {.column width=\"42%\"}\n\n::: {#fb8832dc .cell execution_count=2}\n``` {.python .cell-code}\nclass Cat(Animal):\n    def __init__(self, name):\n        super().__init__(name)\n        self.appetited = 30\n    \n    def sound(self):\n        print(\"Meow!\")\n```\n:::\n\n\n:::\n:::\n\n`Cat` 类型的变量就可以使用 `Animal` 的所有成员变量和成员函数。\n\n::: {#4d979d8b .cell execution_count=3}\n``` {.python .cell-code}\ntcell = Cat(\"Tcell\")\nprint(\"Starve level: {0:.2f}%\".format(tcell.starve * 100))\nprint(\"after eat: {0:.2f}%\".format(tcell.eat(20) * 100))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStarve level: 0.00%\nafter eat: 66.67%\n```\n:::\n:::\n\n\n::: {#8201d96d .cell execution_count=4}\n``` {.python .cell-code}\ntcell.sound()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMeow!\n```\n:::\n:::\n\n\n# 内置类\n\nPython 的一些内置类提供了很多方法。\n\n## 字符串\n\n::: {.columns}\n::: {.column}\n\n::: {#dc164e47 .cell execution_count=5}\n``` {.python .cell-code}\n\"Python\".lower()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n'python'\n```\n:::\n:::\n\n\n::: {#cd16f289 .cell execution_count=6}\n``` {.python .cell-code}\n\"Python\".upper()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n'PYTHON'\n```\n:::\n:::\n\n\n::: {#293cf8b0 .cell execution_count=7}\n``` {.python .cell-code}\n\"Python\".swapcase()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n'pYTHON'\n```\n:::\n:::\n\n\n::: {#c1666b89 .cell execution_count=8}\n``` {.python .cell-code}\n\"python\".capitalize()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n'Python'\n```\n:::\n:::\n\n\n::: {#6754a70d .cell execution_count=9}\n``` {.python .cell-code}\n\"Python\".startswith(\"Py\")\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#e677c893 .cell execution_count=10}\n``` {.python .cell-code}\n\"Python\".endswith(\"on\")\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#efdd5e6f .cell execution_count=11}\n``` {.python .cell-code}\n\"Python\".find(\"th\")\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n2\n```\n:::\n:::\n\n\n:::\n::: {.column}\n\n::: {#943e3ce6 .cell execution_count=12}\n``` {.python .cell-code}\n\"Python,Java,C++\".split(\",\")\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n['Python', 'Java', 'C++']\n```\n:::\n:::\n\n\n::: {#c5db51f7 .cell execution_count=13}\n``` {.python .cell-code}\n\"Python,Java,C++\".replace(\",\", \" | \")\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n'Python | Java | C++'\n```\n:::\n:::\n\n\n::: {#f45bc500 .cell execution_count=14}\n``` {.python .cell-code}\n\", \".join([\"Python\", \"Java\", \"C++\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n'Python, Java, C++'\n```\n:::\n:::\n\n\n::: {#637c12c0 .cell execution_count=15}\n``` {.python .cell-code}\n\"  Python. \".strip()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n'Python.'\n```\n:::\n:::\n\n\n::: {#bf9559d9 .cell execution_count=16}\n``` {.python .cell-code}\n\"Result: {0:.2f}\".format(1/3)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n'Result: 0.33'\n```\n:::\n:::\n\n\n::: {#b71477da .cell execution_count=17}\n``` {.python .cell-code}\n\"Result: {res:.2f}\".format(res=1/3)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n'Result: 0.33'\n```\n:::\n:::\n\n\n:::\n:::\n\n## 列表\n\n::: {.columns}\n::: {.column}\n\n::: {#1a52d55b .cell execution_count=18}\n``` {.python .cell-code}\na = [1,2,3]\na.append(4)\na\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n[1, 2, 3, 4]\n```\n:::\n:::\n\n\n::: {#272e17ef .cell execution_count=19}\n``` {.python .cell-code}\na.extend([4,5,6])\na\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n[1, 2, 3, 4, 4, 5, 6]\n```\n:::\n:::\n\n\n::: {#a46ce71b .cell execution_count=20}\n``` {.python .cell-code}\nprint(a.pop())\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n[1, 2, 3, 4, 4, 5]\n```\n:::\n:::\n\n\n::: {#5b3de88a .cell execution_count=21}\n``` {.python .cell-code}\na.reverse()\na\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n[5, 4, 4, 3, 2, 1]\n```\n:::\n:::\n\n\n:::\n::: {.column}\n\n::: {#e59f3a63 .cell execution_count=22}\n``` {.python .cell-code}\na.insert(2, 9)\na\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n[5, 4, 9, 4, 3, 2, 1]\n```\n:::\n:::\n\n\n::: {#067ee8ed .cell execution_count=23}\n``` {.python .cell-code}\na.remove(4)\na\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n[5, 9, 4, 3, 2, 1]\n```\n:::\n:::\n\n\n::: {#ba94ba91 .cell execution_count=24}\n``` {.python .cell-code}\nprint(a.pop(2))\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n[5, 9, 3, 2, 1]\n```\n:::\n:::\n\n\n::: {#173cb7c6 .cell execution_count=25}\n``` {.python .cell-code}\na.clear()\na\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n[]\n```\n:::\n:::\n\n\n:::\n:::\n\n## 字典\n\n::: {.columns}\n::: {.column}\n\n::: {#36ff4a03 .cell execution_count=26}\n``` {.python .cell-code}\nd = {\n    'name': '小区名称',\n    'developer': '开发商'\n}\nd.items()\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\ndict_items([('name', '小区名称'), ('developer', '开发商')])\n```\n:::\n:::\n\n\n::: {#aaed679f .cell execution_count=27}\n``` {.python .cell-code}\nd.keys()\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\ndict_keys(['name', 'developer'])\n```\n:::\n:::\n\n\n::: {#c8a113e2 .cell execution_count=28}\n``` {.python .cell-code}\nd.values()\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\ndict_values(['小区名称', '开发商'])\n```\n:::\n:::\n\n\n::: {#42580dcb .cell execution_count=29}\n``` {.python .cell-code}\nfor key, value in d.items():\n    print(f\"{key}={value}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nname=小区名称\ndeveloper=开发商\n```\n:::\n:::\n\n\n:::\n::: {.column}\n\n::: {#37b3cd08 .cell execution_count=30}\n``` {.python .cell-code}\nd.get('name', '默认名称')\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n'小区名称'\n```\n:::\n:::\n\n\n::: {#ebacd063 .cell execution_count=31}\n``` {.python .cell-code}\nd.get('city', '郑州')\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n'郑州'\n```\n:::\n:::\n\n\n::: {#b4292c37 .cell execution_count=32}\n``` {.python .cell-code}\nd.update({'city': '郑州'})\nd\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n{'name': '小区名称', 'developer': '开发商', 'city': '郑州'}\n```\n:::\n:::\n\n\n::: {#dba692e8 .cell execution_count=33}\n``` {.python .cell-code}\nprint(d.pop('city'))\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n郑州\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n{'name': '小区名称', 'developer': '开发商'}\n```\n:::\n:::\n\n\n::: {#59d33aa0 .cell execution_count=34}\n``` {.python .cell-code}\n{}.fromkeys(['bed', 'bath'], 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n{'bed': 2, 'bath': 2}\n```\n:::\n:::\n\n\n:::\n:::\n\n# 异常\n\n这是一类特殊的类型，用于表示程序遇到了异常情况。\n\n## 什么情况下会遇到异常\n\n凡是代码无法正确执行的时候，就会抛出一个异常。\n\n- 除数为 0 的时候，抛出 `ZeroDivisionError` 。\n- 访问的列表元素超出了列表长度，抛出 `IndexError` 。\n- 参数的类型不对，抛出 `TypeError` 。\n- 使用的变量或函数找不到，抛出 `NameError` 。\n- 找不到指定文件，抛出 `FileNotFoundError` 。\n- 网页不存在（404），抛出 `HTTPError` 。\n- 网页超时无法打开，抛出 `ConnectTimeoutError` 。\n\n## raise 语句抛出异常\n\n在一些情况下，如果认为当前的情况是一种异常情况，可以使用 `raise` 手动抛出一个异常。\n这表示我们不对当前情况做任何处理，而是交给更上一层的代码块处理。\n\n```python\nraise ValueError(\"Some message\")\nraise ValueError((\"Some message\", 2))\n```\n\n异常的构造函数通常都有一个参数，用来保存一些信息，这些信息被放在了 `args` 成员变量中。\n\n::: {.callout-tip}\n异常虽然有很多种类型，但不同类型之间在定义上没有太大的区别。\n使用不同异常类型的目的是指示这个异常的性质。\n比如当除数是 0 时，使用 `ZeroDivisionError` 就比 `ValueError` 更清晰的指出了异常的本质。\n:::\n\n---\n\n> 在写网络爬虫的时候，正常情况下会获得一个字典，其中有一个键名（字段）是 `data`，对应的键值表示要获取的数据，可以从中提取出我们需要的信息。\n> 但是有的时候可能会发生一些错误，此时这个字段就消失了。\n> 这时需要抛出一个 `ValueError` 的异常，表示获得的结果不对。\n\n::: {#a52fef5c .cell execution_count=35}\n``` {.python .cell-code}\ndef get_data(response):\n    if \"data\" not in response:\n        raise ValueError(\"Field 'data' not found in response\")\n    data = response[\"data\"]\n    return len(data)\n```\n:::\n\n\n::: {#30c8cc38 .cell execution_count=36}\n``` {.python .cell-code}\nresponse1 = {'status': 200, 'data': [{'name': '碧桂园'}, {'name': '万达'}]}\nget_data(response1)\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n2\n```\n:::\n:::\n\n\n::: {#72946d1c .cell execution_count=37}\n``` {.python .cell-code}\nresponse2 = {'status': 404, 'message': 'Page not found.'}\nget_data(response2)\n```\n\n::: {.cell-output .cell-output-error}\n```\nValueError: Field 'data' not found in response\n```\n:::\n:::\n\n\n## try-except 语句捕获异常\n\n格式\n\n::: {.columns}\n::: {.column}\n\n```python\ntry:\n    # Some code\nexcept:\n    # Deal with exception\n```\n\n:::\n::: {.column}\n\n```python\ntry:\n    # Some code\nexcept SomeException:\n    # Deal with exception\nexcept AnotherException as e:\n    # Deal with exception\n    # using some info in e\n```\n\n:::\n:::\n\n::: {.callout-tip}\n- 如果不指定异常类型，则捕获所有类型的异常\n- 如果指定异常类型 A，也会捕获派生自 A 的类型的异常\n- 异常类型是从上至下匹配的\n:::\n\n---\n\n> 循环使用 `get_data` 函数处理下面的返回值列表，并处理的异常。\n> 当遇到异常时，输出一句话，显示是在处理哪个 `response` 时发生的异常。\n\n::: {#79d7b630 .cell execution_count=38}\n``` {.python .cell-code}\nresponse_list = [response1, response2]\n```\n:::\n\n\n::: {.fragment}\n\n::: {#3eec671f .cell execution_count=39}\n``` {.python .cell-code}\nfor i, res in enumerate(response_list):\n    try:\n        get_data(res)\n    except ValueError as e:\n        print(f\"Value error raised at response {i}: {e.args[0]}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nValue error raised at response 1: Field 'data' not found in response\n```\n:::\n:::\n\n\n:::\n\n\n# 下节\n\n模块\n\n- 安装模块\n- 常用模块\n\n",
    "supporting": [
      "03-object-oriented_files"
    ],
    "filters": [],
    "includes": {}
  }
}