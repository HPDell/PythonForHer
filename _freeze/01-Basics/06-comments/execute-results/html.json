{
  "hash": "0de0432cf5f33120c40b952e5557aa4e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"注释和注解\"\ndescription: \"给代码一些说明\"\n---\n\n# 注释\n\n## 单行注释\n\n任何一行如果出现了字符 `#`，那么后面的字符就会被认为是注释。\n**注释的部分不会被执行。**\n\n::: {#04d458ea .cell execution_count=1}\n``` {.python .cell-code}\nactor = '赵丽颖'  # 设置目标\nprint(actor)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n赵丽颖\n```\n:::\n:::\n\n\n上面 `# 设置目标` 的部分就是注释。\n\n::: {.callout-important}\n一个 `#` 只能将所在行后面的字符标记为注释，无法影响下一行。\n如果要在下一行继续注释，需要在下一行也插入一个 `#`。\n:::\n\n单行注释一般只用于解释这一行，通常附在该行的代码之后。\n\n---\n\n在编写程序时，通常会遇到一种情况，\n我们可能既不想删除某些代码，也不想执行这些代码。\n单行注释也可以用于保留某些行代码但不执行。\n这就是所谓的“将某些代码注释掉”，而不是“删掉”，使得我们可以保留代码本身。\n\n- **运行和调试**：在运行中，将输出取消掉。但是在调试时，把这些注释符号去掉，就可以直接使用这些代码了。\n\n```python\nactor = '赵丽颖'  # 设置目标\n#print(actor)\n```\n\n- **调整运行参数**：使用不同的参数（年份）运行同一段代码，只保留这次需要使用的参数，而注释其他参数。\n\n```python\nyear = 2010\n# year = 2015\n# year = 2020\n```\n\n## 多行注释\n\n有时单行注释写起来会比较麻烦，需要多行来提高注释的可读性。\n这时就需要使用前后各至少三个 `'` 或 `\"` 包裹起来段落进行多行注释。\n\n```python\n'''\n设置运行参数。\n这些参数可以通过外部配置文件进行设置。\n'''\nactor = '赵丽颖'  # 演员\nyaer = 2015       # 年份\n```\n\n通过配合多行注释以及单行注释，就可以给代码一个清晰的说明。\n\n## 文档字符串\n\n给我们编写的函数写注释文档是一个比较好的习惯，以防后面我们忘了这个函数的目的以及参数的作用。\nPython 给编写函数文档设定了一定的格式，使得编辑器可以识别这种格式并进行更好地代码提示。\n\n```python\ndef page_num(page_size, total):\n    \"\"\"\n    计算总页数。\n\n    Args:\n        page_size (int): 每页展示的项目数量\n        total (int): 项目总数量\n    \n    Returns:\n        总页数\n    \"\"\"\n    return total // page_size + int(total % page_size > 0)\n```\n\n文档字符串的格式有很多。\n\n---\n\n\n```python\ndef offset(page_size, page):\n    \"\"\"根据页数和每页显示数量计算偏移量\n\n    :param page_size: 偏移量\n    :type page_size: int\n    :param page: 当前页码\n    :type page: int\n    \"\"\"\n    return page_size * (page - 1)\n```\n\n```python\ndef coords_id(loc):\n    \"\"\"根据坐标生成 id\n\n    Parameters\n    ----------\n    loc : tuple[float, float]\n        坐标元组\n    \n    Returns\n    -------\n    str\n        当前坐标的 ID 值\n    \"\"\"\n    return f\"{round(loc[0], 6)}-{round(loc[1], 6)}\"\n```\n\n# 类型注解\n\n## Python 中的类型\n\nPython 是一个弱类型语言，其本身对变量的类型没有什么要求。\n我们可以给一个变量设置任何类型的值。\n\n```python\nactor = '赵丽颖'\nprint(actor)\nactor = 130493\nprint(actor)\n```\n\n这样虽然非常灵活，但往往会因为类型的问题造成很多问题。\n\n```python\npage_num('10', 100)\n```\n\n上面这个代码运行就会出错，因为显然第一个参数是字符串，无法进行数学运算。\n\n## 给变量标记类型\n\nPython 现在已经支持通过类型注解明示变量和函数返回值类型。\n\n```python\nactor: str = '赵丽颖'\ndef page_num(page_size: int, total: int) -> int:\n    return total // page_size + int(total % page_size > 0)\n```\n\n类型注解也可以和默认值一起设置\n\n```python\ndef idw3(p1: float, p2: float, power: int=2) -> float:\n    squared_distance = (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2\n    powered_distance = squared_distance ** (power / 2)\n    return 1 / powered_distance\n```\n\n::: {.callout-important}\n加了类型注解后，并不代表函数的参数只能接受注解的类型，依然是可以接受任何参数。\n但这给我们编程时提供了很多帮助。\n:::\n\n---\n\n### Typing 包\n\n这个包提供了一些用在注解中的类型，让我们可以更好方便地写注解。\n\n::: {#7ce2783c .cell execution_count=2}\n``` {.python .cell-code}\nfrom typing import Optional, Union, Tuple\nclass Property:\n    def __init__(self,\n                 name: str,\n                 price: Union[int, float],\n                 address: Optional[str],\n                 coords: Tuple[float, float]):\n        self.name = name\n        self.price = price\n        self.address = address\n        self.coords = coords\n```\n:::\n\n\n新版本的 Python 也支持直接使用 `tuple` `list` 等写注解，而不用从 Typing 包导入。\n\n---\n\n### 泛型\n\n泛型本身是强类型语言的概念，目的是使某个类支持多种类型的变化。\n但是 Python 本身就是动态类型，从概念上不需要泛型。\n然而通常我们会在类型注解中使用泛型，例如上面的 `Tuple[int, float]`，\n`Tuple` 本身是泛型，我们通过使用 `[]` 指定具体的类型。\n\n### 鸭子类型\n\n虽然我们可以使用类型注解来标注函数类型，但也并非只能使用我们标注的类型。\n事实上只要某种类型支持函数中所用的这个变量的方法或属性就可以了，而不一定要求类型名一样。\n\n> 如果一个动物看起来像鸭子，走起来像鸭子，叫起来像鸭子，那就认为它是鸭子。\n\n# 下节\n\n网络编程\n\n- 基础\n- 网络编程\n- 编写爬虫\n\n",
    "supporting": [
      "06-comments_files"
    ],
    "filters": [],
    "includes": {}
  }
}