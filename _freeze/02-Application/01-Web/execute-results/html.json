{
  "hash": "6dd283ecb2567a7145d6ee6661e6d580",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"网络\"\ndescription: \"与外部世界交互\"\nformat:\n  revealjs: \n    theme: [dark, url-styles.scss]\n            \n---\n\n# 网络基础\n\n互联网定义了很多协议，用于计算机之间进行通信。\n为了在通信过程中传输数据，又定义了一些格式。\n\n## 超文本传输协议（HTTP）\n\n互联网中最常见的信息交互协议是 HTTP，后来为了增加安全性，在 HTTP 协议基础上出现了 HTTPS 协议。\n浏览器主要处理的就是 HTTP 协议传输的数据，按下 `F12` 打开开发者工具就可以看到就网络传输的过程。\n\n:::: {.columns}\n::: {.column}\n![](./assets/WebPage.png)\n:::\n::: {.column}\n![](./assets/DeveloperTools.png)\n:::\n::::\n\n---\n\n### 请求和响应\n\nHTTP 协议的工作方式是请求和响应。\n\n::: {.columns}\n::: {.column}\n\n#### 请求 (Request)\n\n计算机向服务器发送 HTTP 请求，并提供给服务器一些数据。\n\n#### 响应 (Response)\n\n服务器根据请求内容，给计算机发送相应的数据。\n\n:::\n::: {.column}\n\n\n```{mermaid}\n%%| echo: false\nsequenceDiagram\n    participant 计算机\n    participant 服务器\n    计算机 ->> 服务器: 请求1\n    服务器 ->> 计算机: 响应1\n    计算机 ->> 服务器: 请求2\n    服务器 ->> 计算机: 响应2\n```\n\n\n:::\n:::\n\n但本质上，请求和响应都是按照一定格式发送的数据。\n只要我们按照这种格式发送数据，就可以实现交互。\n\n## 统一资源路径（URL）\n\n互联网上的资源非常多，计算机是怎么知道要向哪里发送请求呢？\n通常使用的是 URL ，俗称地址。\n\n### 常用格式\n\n::: {.url}\n<span class=\"p\">协议</span>://<span class=\"d\">域名</span>/<span class=\"l\">路径</span>?<span class=\"q\">查询字符串</span>\n\n<span class=\"p\">https</span>://<span class=\"d\">zz.esf.fang.com</span>/<span class=\"l\">chushou/3_183860422.htm</span>?<span class=\"q\">channel=2,2&psid=1_1_60</span>\n<span class=\"p\">https</span>://<span class=\"d\">restapi.amap.com</span>/<span class=\"l\">v3/place/text</span>?<span class=\"q\">city=zhengzhou&offset=20&page=1</span>\n:::\n\n只要按照上述方式拼接字符串，就是一个合法的 URL 。\n\n---\n\n### 路径\n\nURL 中使用 `/` 作为路径的分割符。\n这里的路径与文件系统中的路径的含义可能是相同的，也能是不同的，存在某种特殊的映射关系。\n\n::: {.callout-note title=\"静态页面\"}\n静态页面是在服务器上固定的文件，URL 后面通常以 `.html` `.htm` 等结尾。\n服务器根据路径直接发送文件内容，过程类似于下载。\n静态页面的路径一般情况下与文件系统一一对应，而且也不支持查询字符串。\n\n例如 `http://gwmodel.whu.edu.cn/` 都是静态页面。\n:::\n\n::: {.callout-note title=\"动态页面\"}\n服务器根据路径或模板临时渲染一个页面，URL 通常没有固定类似于扩展名的结尾，或者以 `.jsp` `.php` 等结尾。\n通常支持查询字符串。\n:::\n\n---\n\n### 查询字符串\n\n如果把路径比作函数，那么查询字符串就类似于参数。\n服务器会根据查询字符串返回相应的页面。\n\n::: {.url}\n?[[name1]{.k}=[value1]{.v}&[name2]{.k}=[value2]{.v}]{.q}\n:::\n\n::: {.callout-important}\n- 查询字符串以 `?` 开始，否则被视为是路径。\n- 每个参数的键值对依次排列，用 `&` 连接。\n- 参数名和参数值之间用 `=` 连接。\n- 参数可以没有值，但是必须有名。\n:::\n\n---\n\n### 域名\n\n域名部分完整的格式其实是 `用户名:密码@域名:端口` ，\n但这四个部分除了域名以外都是可以省略的，所以通常情况下只需要写域名即可。\n\n::: {.callout-important}\n- 如果不写端口，那么表示端口值是默认端口，HTTP 协议的默认端口是 80，HTTPS 协议的默认端口是 443。\n  但如果网站服务并不是发布在 80 端口上，就必须要写出端口。\n  比如 [https://blog.huyg.site:8443/](https://blog.huyg.site:8443/)\n- 如果不写用户名，就不用写密码，表示以匿名用户登录。如果写了用户名，也可以不写密码，表示无需密码。\n- 这种用户名密码的身份验证方式比较危险，很容易泄露，所以现在大多数网站已经抛弃了这种认证方式。\n:::\n\n## 请求数据\n\n除了在 URL 里面提供参数，请求也可以发送一些数据，但这些数据要按照一定的格式转换为字符串，也就是“序列化”。\n常用的格式有：\n\n- `form-data` ：表单格式，最早的发送请求数据的方式，通常用于页面表单。可以用来传文件。\n- `json` ：常用于网络接口，用于在发送一些特别复杂的数据。\n- `xml` ：通常也用于网络接口，有一些比较复杂的网络服务需要以这种方式提供数据。\n\n除了这些格式以外，每个服务都可以以自己的方式处理数据，所以需要研究页面，对症下药。\n\n## 请求方式\n\n发送请求时，除了要指定请求地址，还要指定请求方式（Method）。\n常用的请求方式有\n\n- `GET`: 通常表示“仅获取”。是一般 HTTP 请求最常用的方式。在 REST 接口中表示“查询”。\n- `POST`: 通常表示“提交”，提交表单数据时常用这个方式。在 REST 接口中表示“添加”数据。\n- `PUT`: 常用于 REST 格式的网络接口中，用于表示“修改”数据。\n- `DELETE`: 常用于 REST 格式的网络接口中，用于表示“删除”数据。\n\n## 响应数据\n\n### HTML 响应\n\n最常见的响应。\n可以是静态的 HTML 文档，也可以是服务器渲染出来的 HTML 格式文档。\n浏览器可以根据文档内容渲染页面，这是最早的浏览器的默认工作方式。\n\n::: {.columns}\n::: {.column}\n![](assets/HTMLPage.png)\n:::\n::: {.column}\n![](assets/HTMLSource.png)\n:::\n:::\n\n--- \n\n### 其他响应\n\n通过开发者工具可以看到，要正常地显示一个页面，除了 HTML 响应以外，还有很多其他类型的响应。例如\n样式表（CSS，用于描述页面的样式）、脚本和图片等。\n\n随着网络技术的发展，有时一个服务可能只响应一些数据，并不提供页面。\n这种相应的格式一般是 JSON 或者 XML。\n目前绝大多数网站已经支持了 JSON 格式的响应，不会只提供 XML 格式的响应。\n\n```json\n{ \"code\":99,\"msg\":\"您的账号信息过期，请重新登录\",\n  \"data\":null,\"help\":\"\",\"dom\":\"\",\"infocode\":99 }\n```\n\n---\n\n下面是一个 XML 响应的例子\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<rss version=\"2.0\">\n  <channel>\n    <title>Mikan Project - 我的番组</title>\n    <description>Mikan Project - 我的番组</description>\n    <item>\n      <guid isPermaLink=\"false\">[银色子弹字幕组]</guid>\n      <title>[银色子弹字幕组]</title>\n      <description>[银色子弹字幕组][198.1MB]</description>\n    </item>\n  </channel>\n</rss>\n```\n\n## 头和体\n\n::: {.callout-tip title=\"问题\"}\n不论请求响应以何种格式传输数据，传过来的都是字符串，那我们如何判断传过来的是什么格式的字符串呢？\n:::\n\n事实上，一个请求或响应由两部分构成：头（Header）和体（Body）。\n请求数据和响应数据指的都是“体”。\n而为了辅助处理体，“头”中有很多非常重要的信息。\n\n---\n\n### 请求头\n\n在开发者工具中就可以看到请求头的信息\n\n::: {.columns}\n::: {.column}\n\n![](assets/RequestHeader.png)\n\n:::\n::: {.column}\n\n::: {.callout-note title=\"一些重要的头\"}\n\n- `Content-Type`: 发送的请求数据的格式。\n- `Accept`: 接受的响应内容的格式，服务器根据这个字段设置响应格式。\n- `User-Agent`: 用于识别浏览器的信息。\n- `Cookie`: 通常保存在浏览该域名时保存的一些数据，可以用于用户认证。\n:::\n\n:::\n:::\n\n---\n\n### 响应头\n\n同样在开发者工具中可以看到响应头，一些比较重要的是：\n\n- `Status`: 极为重要！这里的代码反映了请求的状态。\n  - `200`: 请求成功。\n  - `404`: 找不到资源，通常是路径导致的错误。\n  - `500`: 内部服务器错误，通常是请求参数或者数据错误。\n- `Content-Type`: 响应体的格式。\n- `Content-Encoding`: 响应体编码，通常是一些压缩数据的格式，例如 `gzip` 等，解压后可得到原始数据。\n\n## Cookie\n\nHTTP 协议有一大特点：“无状态”。任何两次 HTTP 请求和响应都是独立的，服务器不会保存任何与请求有关的信息。\n但用户往往需要在不同页面之间跳转以完成一个工作，这种情况下就必然需要一些信息关联不同的页面。\n\n- 用户在登录页进行登录，在其他页面访问一些个人数据。\n- 用户在购物页选择要购买的商品，在购物车页面管理添加的商品，并在支付页进行支付。\n\nCookie 就是一种保存必要数据的方法。\n每次发送请求时，Cookie 都会自动放在请求头中发送。\n\n# 网络编程\n\n使用 `urllib3` 库发送请求和处理响应。\n\n## 确定 URL\n\n只有确定了 URL ，才能使用库发送请求。\n通常有两种方式：根据文档构造、从页面获取。\n\n\n---\n\n### 根据文档构造\n\n适用于网络接口，有文档说明接口如何使用。\n例如，查看“高德地图搜索 POI^[https://lbs.amap.com/api/webservice/guide/api/search]” 的接口文档\n\n::: {#cff44231 .cell execution_count=1}\n``` {.python .cell-code}\nbase_url = 'https://restapi.amap.com'\nquery = {\n  'keywords': '北京大学',\n  'city': 'beijing',\n  'offset': 20,\n  'page': 1,\n  'extensions': 'all'\n}\nquery_string = '&'.join([f'{k}={v}' for k, v in query.items()])\nf'{base_url}/v3/place/text?{query_string}'\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n'https://restapi.amap.com/v3/place/text?keywords=北京大学&city=beijing&offset=20&page=1&extensions=all'\n```\n:::\n:::\n\n\n---\n\n有一个库函数可以直接实现这个过程，并且进行了额外的处理。\n\n::: {#620e3b0e .cell execution_count=2}\n``` {.python .cell-code}\nfrom urllib.parse import urlencode\nquery_string = urlencode(query)\nprint(f'{base_url}/v3/place/text?{query_string}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhttps://restapi.amap.com/v3/place/text?keywords=%E5%8C%97%E4%BA%AC%E5%A4%A7%E5%AD%A6&city=beijing&offset=20&page=1&extensions=all\n```\n:::\n:::\n\n\n::: {.callout-tip title=\"转义字符\"}\n在 URL 中一些特殊字符（如 `, + |` 等）需要使用转义字符表示，避免产生冲突。\n例如如果参数值有 `&` 就需要转义，否则就会被认为是一个新的参数。\n而且早期 URL 仅支持 ASCII 编码，像中文这样无法用 ASCII 码表示的就只能进行转义。\n:::\n\n---\n\n### 从页面获取\n\n如果不是访问接口，而是直接访问页面，那么页面中就会包含很多链接。\n例如下面这个网页每个房源的标题就都包含一个链接。\n\n::: {.columns}\n::: {.column width=\"40%\"}\n\n![](assets/FangList.png)\n\n:::\n::: {.column width=\"60%\"}\n\n```html\n<dd>\n  <h4 class=\"clearfix\">\n    <a ps=\"1_1_60\" href=\"/chushou/3_183860422.htm\" target=\"_blank\" data_channel=\"2,2\"\n      title=\"小两口房,低价出售,好房不等人,先到先得!!\">\n      <span class=\"tit_shop\"> 小两口房,低价出售,好房不等人,先到先得!!</span>\n    </a>\n  </h4>\n  <p class=\"tel_shop\"> 1室1厅 <i>|</i> 59.99㎡ <i>|</i>\n    <a class=\"link_rk\" href=\"//baike.fang.com/item/中层/12851744\" target=\"_blank\">中层</a>\n    （共11层） <i>|</i> 西向 <i>|</i> 2012年建 <i>|</i>\n    <span class=\"people_name\">\n      <a nofollow=\"\" href=\"/agentshop/1165372.html\"\n        title=\"访问[李庆孟]的个人网上店铺，查看更多房源\" target=\"_blank\">李庆孟\n      </a>\n    </span>\n  </p>\n</dd>\n```\n\n:::\n:::\n\n## 发送请求\n\n`urllib3` 包中的 `request` 函数负责发送请求并解析 HTTP 响应。\n\n::: {#e2d65869 .cell cache='true' execution_count=3}\n``` {.python .cell-code}\nimport urllib3\nres_hp_list = urllib3.request(\"GET\", \"https://zz.esf.fang.com/\")\nif res_hp_list.status == 200:\n  print(res_hp_list.data[:1000].decode())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<!DOCTYPE html><html><head><title>【郑州二手房|郑州二手房出售】 - 郑州房天下</title><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta http-equiv=\"pragma\" content=\"no-cache\" /><meta http-equiv=\"Cache-Control\" content=\"no-cache, must-revalidate\" /><meta name=\"mobile-agent\" content=\"format=html5;url=https://m.fang.com/esf/zz/\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" /><meta name=\"renderer\" content=\"webkit\" /><meta http-equiv=\"Content-Language\" content=\"zh-cn\" /><meta property=\"og:type\" content=\"image\" /><meta property=\"og:image\" content=\"//imgwcs3.soufunimg.com/news/2020_09/17/d9530978-ffc2-44a7-84e8-6be1bdcce6b3.png\" /><link rel=\"dns-prefetch\" href=\"//cdnsfb.soufunimg.com\" /><link rel=\"dns-prefetch\" href=\"//esf.js.soufunimg.com\" /><link rel=\"dns-prefetch\" href=\"//img1n.soufunimg.com\" /><link rel=\"dns-prefetch\" href=\"//img11.soufunimg.com\" /><link rel=\"dns-prefetch\" href=\"//js.ub.fang.com\" /><link rel=\"dns-prefetch\" href=\"\n```\n:::\n:::\n\n\n---\n\n### 带参数的请求\n\n::: {#50e3e171 .cell cache='true' execution_count=4}\n``` {.python .cell-code}\nfrom pathlib import Path\nres_hp_item = urllib3.request(\n  \"GET\",\n  \"https://zz.esf.fang.com/chushou/3_183860422.htm\",\n  fields={'channel': '2,2', 'psid': '1_1_60'}\n)\nif res_hp_item.status == 200:\n  print(res_hp_item.data[:1000].decode())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<!DOCTYPE html><html><head><title>小两口房，低价出售，好房不等人，先到先得！！，郑州郑东新区CBD豫航泊郡二手房一室 - 房天下</title><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" /><meta name=\"renderer\" content=\"webkit\" /><link rel=\"dns-prefetch\" href=\"//cdnsfb.soufunimg.com\" /><link rel=\"dns-prefetch\" href=\"//esf.js.soufunimg.com\" /><link rel=\"dns-prefetch\" href=\"//img1n.soufunimg.com\" /><link rel=\"dns-prefetch\" href=\"//img11.soufunimg.com\" /><link rel=\"dns-prefetch\" href=\"//js.ub.fang.com\" /><link rel=\"dns-prefetch\" href=\"//clickn.fang.com\" /><link rel=\"dns-prefetch\" href=\"//countubn.3g.fang.com\" /><link rel=\"dns-prefetch\" href=\"//countpvn.light.fang.com\" /><link rel=\"dns-prefetch\" href=\"//www.google-analytics.com\" /><meta name=\"mobile-agent\" content=\"format=html5;url=https://m.fang.com/esf/zz/AGT_183860422.html\"><link rel=\"alternate\" media=\"only screen and(max-width:640px)\" href=\"https://m.fang.com/esf/zz/AGT_183860422.html\"><met\n```\n:::\n:::\n\n\n---\n\n### 带参数的 POST 请求\n\n如果是 POST 请求，那么查询字符串只能手动生成\n\n```python\nencoded_args = urlencode({\"arg\": \"value\"})\nurl = \"https://httpbin.org/post?\" + encoded_args\nresp = urllib3.request(\"POST\", url, fields={\"field\": \"value\"})\n```\n\n此时 `fields` 参数的值将作为 FormData 格式的请求体传输。\n\n### 传递 JSON 数据\n\n如果请求中需要发送 JSON 数据，使用 `json` 参数\n\n```python\nresp = urllib3.request(\n    \"POST\",\n    \"https://httpbin.org/post\",\n    json={\"attribute\": \"value\"},\n    headers={\"Content-Type\": \"application/json\"}\n)\n```\n\n## 处理响应\n\n`request()` 函数的返回值就是解析后的响应，通过检查 `status` 和 `data` 就可以获取状态码和响应数据。\n\n### 处理状态码\n\n::: {#cd68acf1 .cell execution_count=5}\n``` {.python .cell-code}\nres_test_status = urllib3.request(\n  \"GET\",\n  \"https://httpbin.org/post\"\n)\nif res_test_status.status == 200:\n  print(\"Success\")\nelse:\n  print(f\"Status: {res_test_status.status}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStatus: 405\n```\n:::\n:::\n\n\n---\n\n### 解析 JSON 响应\n\n通常情况下，直接以字符串的方式处理响应体是非常困难的。\n由于响应体大多都遵循一定的格式，所以可以将其解析为相应的类对象，则会更方便，这个过程是“反序列化”。\nJSON 格式的响应体可以直接用 `.json()` 函数转换为字典对象，\n\n::: {#c357f390 .cell execution_count=6}\n``` {.python .cell-code}\nres_test_json = urllib3.request(\n  \"GET\",\n  \"https://api.xygeng.cn/one\"\n)\nif res_test_json.status == 200:\n  print(res_test_json.json())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'code': 200, 'data': {'id': 1068, 'tag': '动画', 'name': '佚名', 'origin': '《RIDER Fate/Zero》', 'content': '荣耀就在彼方，遥不可及才要挑战，歌颂霸道，展现霸道，为了守护我背影的臣子。', 'created_at': '2019-01-23T08:43:05.000Z', 'updated_at': '2022-03-09T08:42:10.000Z'}, 'error': None, 'updateTime': 1714927815066}\n```\n:::\n:::\n\n\n---\n\n### 解析 HTML 响应\n\nHTML 本身是一种 XML 格式的扩展，通常我们使用 `parsel` 等库进行解析，\n使用 XPATH 或者 CSS Selector 提取数据。\n\n::: {#dea352b1 .cell execution_count=7}\n``` {.python .cell-code}\nfrom parsel import Selector\nif res_hp_list.status == 200:\n  s = Selector(text=res_hp_list.data.decode())\n  hp_list = s.xpath('//div[@class=\"shop_list shop_list_4\"]/dl/dd/h4/a/span/text()')\n  print([x.get().strip() for x in hp_list[:5]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['小两口房,低价出售,好房不等人,先到先得!!', '!CBD环境优雅1万元南北通透', '鸿园独栋 边户花园 有车位有露台 诚心出售', '均价18000左右万科山河道二期精装修 楼层可选 团购优惠', '今年交房,三环边,好房源,配套 和中學,看房方便']\n```\n:::\n:::\n\n\n::: {#675387fb .cell execution_count=8}\n``` {.python .cell-code}\nif res_hp_list.status == 200:\n  s = Selector(text=res_hp_list.data.decode())\n  hp_pages = s.css('div.shop_list dl dd h4 a::attr(href)').getall()\n  print(hp_pages[:5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['/chushou/3_183860422.htm', '/chushou/3_183860408.htm', '/chushou/3_183854958.htm', '/chushou/3_183853206.htm', '/chushou/3_183737028.htm']\n```\n:::\n:::\n\n\n---\n\n### 反序列化为类对象\n\n如果返回值不是 JSON 格式而是 XML 格式，那么就不能直接转化为字典了。\n有的时候字典使用起来不太方便，例如要不断地查看返回样例确定返回数据的结构以确定键名。\n这时可以使用 `xsdata` 包提供的反序列化的功能将返回值直接转化为 Python 类对象。\n\n```python\nfrom xsdata.formats.dataclass.parsers import XmlParser\nfrom xsdata.formats.dataclass.parsers.config import ParserConfig\n\n@dataclass\nclass RSS:\n    channel: RSSChannel = field(metadata={'type': 'Element'})\n\ndef feed_parse(feed: FeedSource):\n    rss_res: res.HTTPResponse = http.request('GET', feed.url)\n    if rss_res.status == 200:\n        rss_body = ''.join([x for x in rss_res.data.decode() if x.isprintable()])\n        rss = xmlparser.from_string(rss_body, RSS)\n        torrent_upload_batch(rss.channel.item, feed)\n```\n\n# 案例：高德地图 POI 获取\n\n",
    "supporting": [
      "01-Web_files"
    ],
    "filters": [],
    "includes": {}
  }
}