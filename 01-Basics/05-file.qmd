---
title: "文件"
description: "Python 中对文件处理的方法"
---

# 文件

理论上讲，文件是对任何读写设备的抽象。
读写设备有很多，主要就是硬盘和网卡。

## 文件类型

说到类型，主要指的是两种：二进制文件和文本文件。

- 二进制文件：由二进制数据构成的文件，比如图片、程序、压缩包等。通常是难以阅读的，需要一定的程序进行读取。
- 文本文件：由字符构成的文件，只要使用文本编辑器打开就可以直接阅读。
  - 字符包括可见字符和不可见字符，回车、换行、制表都是不可见字符。字母、数字和特殊符号都是可见字符。
  - 所有字符（包括中文）都是由一定的二进制码记录的，这种字符与二进制的对应方式称为“编码”。常见的编码方式有 ASCII、UTF-8、GB2312 等。

## 文件格式

不论是二进制文件还是文本文件，都有一定的格式。通常情况下，文件名的最后一个 `.` 后面的字符表示其格式，这部分被称为“扩展名”。

- 二进制文件：JPEG、ZIP、EXE 等。二进制数据按照一定方式排列，才能正确执行。
- 文本文件：
  - TXT：纯文本文件，没有什么固定的格式，只表示一些文本。
  - CSV：逗号分隔值，每行表示一个数据，每个数据由很多字段组成，字段之间由逗号分隔。
  - JSON：一般用于表示字典数据。

---

::: {.callout-important title="文件格式和扩展名并不是一回事"}
- 文件格式是数据组织的方式，通常由一定的标准指定。而文件扩展名只是文件名的一部分，用来表示文件格式。
- 通常情况下扩展名和格式要一一对应，文件才能被正确读取。但是如果扩展名不对，只要格式是正确的，也可以用相应的程序打开。比如把图片的扩展名改成 `.txt` 一样可以用 PS 打开。
- 扩展名可以任意修改，格式并不会随之变化，修改格式必须要通过一定的程序进行转换。
比如可以将 JSON 文件的扩展名写成 `.txt` 并不会影响文件的格式；
JPG 图片的后缀修改成 `.ai` 并不代表它就变成了 Adobe Illustrator 文件。
- 一个文件格式也可有多个扩展名表示，比如 JPEG 图片的扩展名可以是 `.jpg` `.jpeg`。
- 也可以根据自己的需要设定一些格式，但通常情况下用已经定义好的格式比较方便。
:::

# 文件读写

## 一般步骤

几乎任何文件读写操作都要遵循以下几个步骤：

- 打开文件：这个过程是获取文件的读写权，只有拥有读写权时才能读取文件。
  - 每个文件的读写权在同一时间只能有一个程序拥有。
  - 读写权有三种，读、写和追加，分别用 `r` `w` `a` 表示。
- 操作文件：根据申请的读写权对文件进行操作。
- 关闭文件：这一步非常重要。只有关闭了文件之后文件才能被其他程序使用，否则其他程序只有等当前程序退出了。通常操作完文件后直接关闭文件。

## 纯文本文件

Python 中自带纯文本文件的读写函数 `open()` ，用于打开文件。

```python
file = open("./assets/demo.txt")
file.close()
```

然而，这样就需要手动关闭文件。所以通常不这样做，而是使用 `with` 关键字让 Python 自动关闭。

```{python}
with open("./assets/demo.txt") as file:
    for row in file:
        print(row.strip())
```

---

`print` 就可以用来写入文件，参数 `file` 就可以指定输出位置。如果不指定，就是标准输出，一般情况下是控制台。

```{python}
with open("./assets/out.txt", mode="w") as fout:
    print("赵丽颖参演过的电视剧：\n", file=fout)
    with open("./assets/demo.txt") as fin:
        for i, row in enumerate(fin):
            if i == 0:
                continue
            title, year = row.strip().split(",")
            print(f"- 《{title}》（{year}年）", file=fout)
```

生成的文件如下：

```{python}
#| echo: false
with open("./assets/out.txt") as fout:
    for row in fout:
        print(row.strip())
```

## CSV 文件

其实上述文件就已经是逗号分隔值文件，只是我们是按照纯文本文件的方式读取的。
Python 提供了一个读写 CSV 文件的包。

