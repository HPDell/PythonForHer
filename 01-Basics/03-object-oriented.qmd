---
title: "自定义类"
description: "自定义类型可以帮助我们更好地实现模块化编程"
---

# 概念和目的

## 什么是自定义的类型 {.small}

很多时候我们要描述的东西是比较复杂的。
比如，要描述一个小区，我们可能需要以下信息:

```python
{
    'name': '小区名称',
    'location': (112.234345, 30.103932),
    'developer': '开发商',
    'avg_price': 12000,
    'buildings': ['#1', '#2', '#3'],
    'is_selling': True,
    'properties': ['1-101', '1-102', '1-201']
}
```

而且可能还有一些以小区为单位的操作，比如：总户数 `count_properties()` 。
这些函数是和“小区”这个类型的变量强绑定的，不能应用于其他类型上。
此时使用内置类型就无法满足我们的需要。

## 面向对象编程

::: {.callout-note title="对象"}
Object，一般翻译为“对象”，也被称为“实例”、“实体”。
具有一定关联的变量和函数的集合，用于整体化地描述某个物体、概念或资源，
从而将零散的代码整合起来。
:::

::: {.callout-note title="类"}
类描述一个对象拥有哪些变量和函数。
必须拥有一个 `__init__()` 函数来初始化变量。
:::

::: {.columns}
::: {.column}

```{python}
class Community:
    def __init__(self):
        self.title = "小区名"
```

:::
::: {.column}

```{python}
comm = Community()
print(comm.title)
```

:::
:::
