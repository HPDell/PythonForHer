---
title: "自定义类"
description: "自定义类型可以帮助我们更好地实现模块化编程"
---

# 面向对象的程序设计

Object-oriented Programming

## 为什么需要类和对象 {.small}

很多时候我们要描述的东西是比较复杂的。
比如，要描述一个小区，我们可能需要以下信息:

```python
{
    'name': '小区名称',
    'location': (112.234345, 30.103932),
    'developer': '开发商',
    'avg_price': 12000,
    'buildings': ['#1', '#2', '#3'],
    'is_selling': True,
    'properties': ['1-101', '1-102', '1-201']
}
```

而且可能还有一些以小区为单位的操作，比如：总户数 `count_properties()` 。
这些函数是和“小区”这个类型的变量强绑定的，不能应用于其他类型上。
此时使用内置类型就无法满足我们的需要。

## 类和对象

::: {.callout-note title="对象"}
Object，一般翻译为“对象”，也被称为“实例”、“实体”。
具有一定关联的变量和函数的集合，用于整体化地描述某个物体、概念或资源，
从而将零散的代码整合起来。
:::

::: {.callout-note title="类"}
类描述一个对象拥有哪些变量和函数。
必须拥有一个 `__init__()` 函数来初始化变量。
:::

::: {.columns}
::: {.column}

```python
class Community:
    def __init__(self):
        self.title = "小区名"
```

:::
::: {.column}

```python
comm = Community()
print(comm.title)
```

:::
:::

## 四个概念

1. 抽象：将某种物体或概念的特点抽象为一组变量。
2. 封装：将该种物体或概念的能力包装为一组函数。
3. 继承：一个类（基类）进行扩展和更改，得到其他类（子类）。
4. 多态：子类种来自基类的函数可以有和基类不同的行为。

Python 中能用到的所有的变量，都是经过抽象和封装的类对象。


## 案例：猫、家猫、虎

::: {.columns}
::: {.column}
1. 猫
   1. 花纹、皮毛、尾巴、年龄
   2. 叫、进食
2. 家猫
   1. 主人、疫苗、宠物证
   2. 喵喵叫、缠人、蹲坐
3. 虎
   1. 野生或饲养、活动区、标识
   2. 咆哮、捕猎
:::
::: {.column}
![](./assets/cat.jpg){width=50%}

![](./assets/tiger.jpg){width=50%}
:::

:::

## 优缺点

1. 抽象和封装可以将代码按照实体组合起来，并赋予其实际含义，可以更好地组织和理解代码。
2. 继承有助于少写代码，减少出错的可能；多态又保持了一定的灵活性。

但是：

3. 抽象和封装要合适，不适当的封装会造成困难，过度封装则会增加维护难度
4. 基类太多有的时候会导致代码容易出错，也容易造成冲突

# 编写类

声明类包含哪些变量和函数的过程。

## 构造函数

在构造函数 `__init__()` 中定义类包含哪些变量。

```python
class Property:
    def __init__(self):
        self.price = 20000
        self.size = 100
        self.bedroom = 2
        self.bathroom = 1
        self.decorated = True
        self.community = Community()
```

::: {.callout-important}
类的所有函数^[静态函数和类函数除外，暂时不考虑这种特殊情况。]都必须包含一个 `self` 参数，而且必须是第一个参数。
:::

---

构造函数除了定义变量外，还有一个重要作用是传递变量的初始值。

```python
class Appartment:
    def __init__(self, price, size, bedroom, bathroom, decorated, community):
        self.price = price
        self.size = size
        self.bedroom = bedroom
        self.bathroom = bathroom
        self.decorated = decorated
        self.community = community

appartment1 = Appartment(20000, 100, 2, 1, True, comm)
print(appartment1.price)
```

## 成员变量

- 成员变量是只属于类对象的变量，其他地方无法获取。
- 同一个类的不同对象的同一个变量，也是不同值的。
- 在类对象后面使用 `.变量名` 的方式使用成员变量，也可以修改值。

```python
appartment1.price = 15000
print(appartment1.price)
```

## 成员函数（方法）

成员函数的编写方法和普通函数一样，但是可以通过 `self` 调用成员变量，而普通函数是不可以使用 `self` 的。

```python
class Appartment:
    def __init__(self, price, bedroom, bathroom):
        self.price = price
        self.bedroom = bedroom
        self.bathroom = bathroom
    
    def info(self):
        print(f"{self.bedroom}b{self.bathroom}b appartment, {self.price} per week.")

appartment1 = Appartment(400, 1, 1)
appartment1.info()
```

- 在类对象后面使用 `.函数名(实参)` 的方式调用成员函数。
- 调用成员函数的时候，不需要明写 `self` 参数。

---

成员函数也可以有自己的参数，使用自己的参数时无需使用 `self`。

```python
class RentalAppartment:
    def __init__(self, price, bedroom, bathroom):
        self.price_per_week = price
        self.bedroom = bedroom
        self.bathroom = bathroom
    
    def total_rent(self, weeks):
        return self.price_per_week * weeks

appart1 = RentalAppartment(400, 1, 1)
appart1.total_rent(52)
```

::: {.callout-tip}
成员函数参数也可以有默认值。
:::

# 内置类

Python 的一些内置类提供了很多方法。

## 字符串

::: {.columns}
::: {.column}

```{python}
"Python".lower()
```

```{python}
"Python".upper()
```

```{python}
"Python".swapcase()
```

```{python}
"python".capitalize()
```

```{python}
"Python".startswith("Py")
```

```{python}
"Python".endswith("on")
```

```{python}
"Python".find("th")
```

:::
::: {.column}

```{python}
"Python,Java,C++".split(",")
```

```{python}
"Python,Java,C++".replace(",", " | ")
```

```{python}
", ".join(["Python", "Java", "C++"])
```

```{python}
"  Python. ".strip()
```

```{python}
"Result: {0:.2f}".format(1/3)
```

```{python}
"Result: {res:.2f}".format(res=1/3)
```

:::
:::

## 列表

::: {.columns}
::: {.column}

```{python}
a = [1,2,3]
a.append(4)
a
```

```{python}
a.extend([4,5,6])
a
```

```{python}
print(a.pop())
a
```

```{python}
a.reverse()
a
```

:::
::: {.column}

```{python}
a.insert(2, 9)
a
```

```{python}
a.remove(4)
a
```

```{python}
print(a.pop(2))
a
```

```{python}
a.clear()
a
```

:::
:::

## 字典


